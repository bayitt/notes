soup.title
soup.title.name
soup.title.string

Beautiful Soup transforms a complex HTML document into a complex tree of Python objects. But you wil only have to deal with about four kinds of objects.
Tag, NavigableString, BeautifulSoup and Comment

A Tag object corresponds to an XML or HTML tag in the original document.
Every tag has a name accessible as .name. Tag objects also have attributes which are available in a dictionary via the .attrs dictionary.
The value of multi valued attributes is available in the .attrs dictionary as a list. We can disable this behavior by passing an additional keyword argument
to the BeautifulSoup constructor which is the multi_valued_attributes and set it as None

We can also make use of the get_attribute_list() method to get values that are always in a list whether they are multi valued attributes or not.
If you parse a document as XML, there are no multi valued attributes

In BeautifulSoup, strings correspond to bits of text within a tag. BeautifulSoup uses the NavigableString to contain these bits of text.
A Navigable string is just like a Python unicode string, except that it also supports some of the features described in Nvaigating the tree and searching the 
tree. We can convert NavigableStrings to normal strings by making use of the str() method to type cast it.
We cannot edit strings arbitrarily in place but can change it by making use of the replace_with() method

The BeautifulSoup object represents the parsed document as a whole. For most purposes, we can treat it as a Tag object

The Comment object is just a special type of NavigableString

BeautifulSoup also defines classes called Stylesheet, Script and TemplateString for embedded css stylesheets, embedded Javascript and HTML templates.

A tag's attributes are available in a list called .contents. The BeautifulSoup object itself also has children. In this case, the <html> tag is the 
child of the BeautifulSoup object. Instead of getting them as a list, you can iterate over a tag's children using the .children generator

The .contents and .children attributes only consider a tag's direct children.
The .descendants attribute allows you iterate over all of a tag's children recursively.

If a tag has only one child, and that child is a NavigableString, the child is made available as .string
If a tag has only one child, and that tag has a .string, then the parent tag is considered to have the same .string attribute.