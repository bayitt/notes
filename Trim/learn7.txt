JSON Web Tokens provide a means of transmitting information from the client to the server in a stateless way. On the server JWTs are generated by signing
user information via a secret key which is then securely stored on the client. Note that JWTs are signed and are not encrypted

The tokens themselves are divided into three parts, the header, payload and signature
JWTs can be signed using a secret(with the HMAC algorithm) or with a public/private key pair using RSA or ECDSA

JSON web tokens consist of three parts separated by a dot. Header, Payload and Signature. The header typically consists of the token, which is JWT and the 
signing algorithm being used.

The second part of the token is the payload, which contains the claims. Claims are statements about an entity(typically the user) and additional data.
There are three types of claims, registered, public and private.

Registered claims are predefined claims which are not mandatory but recommended. Some of them are iss, exp, sub and aud

The payload is then Base64Url encoded to form the second part of the JSON web token

In order to create the signature, we then need to take the base64 encoded header, the base 64 encoded payload, a secret, the algorithm specified in the header 
and signs it.

In order to make use of jwts in our python code, we are going to make use of a package called pyjwt. Then we import the jwt package. The main thing 
really about using it and creating our jwts is that we need to create a payload dictionary in which we are going to specify our claims.

The major claims we need are iat, which represents issued at, then we have exp which indicates when the token will expire. Then we need to call a jwt.encode()
method which is going to take several parameters which are the payload, the app secret, and a keyword algorithm parameter.

Decoding the token is as simple as calling decode() on the jwt package. To this we pass in the token, and the secret key. The exceptions available are
jwt.ExpiredSignatureError and jwt.InvalidTokenError