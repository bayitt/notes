- Unit Test - Specify and test one point of the contract of single method of a class. This should have a very narrow and well defined scope. Complex dependencies and interactions to the
outside world are stubbed or mocked.

- Integration Test - Test the correct inter-operation of multiple subsystems. There is a whole spectrum here from  testing the integration between two classes, to testing integration
within the production environment

- Smoke Test: A simple integration test where we just check that when the system under test is invoked it returns normally and does not blow up

- Regresstion Test: A test written when a bug was fixed. It ensures that this specific bug will not occur again. The full name is "non-regression test"

- Acceptance Test: Test that a feature or use case is correctly implemented. It is similar to an integration test but with a focus on the use case to provide rather than on the
components involved

- System Test: Tests a system as a black box. Dependencies on other systems are often mocked or stubbed during the test.

- Pre-flight Test: Tests that are repeated in a production like environment, to alleviate the builds on my machine problem

jest --init

Jest uses matchers to let you test values in different ways. The simplest way to test a value is with exact equality. In Jest, anytime we call expect() on something, it typically
returns an expectation object. We typically wont do much with these expectation objects except call matchers on them.

toBe() uses Object.is() to test equality. If you want to check the equality of an object, we can make use of toEqual()

We can also test for the opposite of a matcher with .not

In tests, sometimes we need to distinguish between undefined, null, and false but we do not want to treat them differently. Jest contains helpers that lets you be explicit about
what you want

- toBeNull matches only null
- toBeUndefined matches only undefined
- toBeDefined is the opposite of toBeUndefined
- toBeTruthy matches anything that an if statement treats as true
- toBeFalsy matches anything that an if statement treats as false
