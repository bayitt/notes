With Laravel, the entry point to the application is from the index.php file in our public folder. When the request comes into index.php, it is taken
to the autoloader and a new app object from bootstrap/app.php is created. Then, the request is passed along to the kernel, either the Http kernel 
or the console kernel. The Http Kernel extends Illuminate\Http\Kernel which contains stuff that needs to be bootstrapped, the kernel also bootstraps the service
providers. After all this is done, the request is handed over to the routing mechanism

Middleware provide a convenient mechanism for filtering HTTP requests entering your application

All middleware are located in the App\Http\Middleware directory

In order to create new middleware, we make use of the command php artisan make:middleware 

In order to allow requests to proceed deeper into the application, we return the $next callback with the request

Middleware can be executed either before or after the request is handled by the application

If you want middleware to run during every HTTP request to your application, add it to the $middleware property of your app\Http\Kernel.php class

If you only want your middleware to be run on particular requests to your application, add it to the routeMiddleware array and assign it a key

Incase we have middleware that are similar and need to be run together, we may do this, by making use of the $middlewareGroups 

Middleware parameters may be specified when defining the route by separating the name and the parameter with a colon :

Laravel makes it easy to protect your application from Cross Site Request Forgery attacks. Laravel automatically generates a CSRF token for each user session
managed by the application. This token is used to verify that the authenticated user is the one actually making the requests to ehe application

Anytime we include a HTML form in our application, we need to add a hidden CSRF token field in the form. We may use the @csrf blade directive to generate the token field

Controllers are stored in the App\Http\Controllers directory

When making use of controllers that execute only a single action, we may make use of the __invoke() method, then when defining the route, we just put
the controller name there

We may generate an invokable controller by adding the --invokable option of the make:controller command