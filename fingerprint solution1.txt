The idea is that in that time specified, we want to process the largest amount of transactions. We are tring to optimize for high amount and low timing.

3 parameters we are trying to optimze for
- high amount
- low time
- totalTime

- high amount, low time (best option) 
- low amount, low time (2nd to best option)
- high amount, high time (2nd to last option)       as the time goes up, the more I want to balance it out 
- low amount, high time (worst option)


1000 USD, 10
400 USD, 5 As there is more time, it should try to optimize more for the gap, but when it is smaller, it should optimize for a smaller gap
300 USD, 2
600 USD, 12


6.44 USD, 99
9.32 USD, 45
15.21 USD, 88
31.96 USD, 115
6.45 USD, 53
736.98 USD, 227
2.11 USD, 56
16.69 USD, 14 if its small, weigh more

First thing I want to do is to get the amount of time that each api call is going to take

23 - 1953 USD, 2 items
22 - 1915.37 uSD, 2 items

What do I want to do
- I want to build upon my existing solution. It makes no sense to record all the transactions that are lower than the required time and then filter it after. That is a lot
of information that I am trying to store. Instead, a better way will be to record the highest transaction pairs recorded so far and after making sure that the transaction
can be done in the required time, compare it to the largest recorded transaction, if it is greater it becomes the highest transaction pair

What exacly am I trying to do
- I want to extend the recursive solution I came up with. Because the brute force approach is not going to work for high dollar amounts. The thinking behind this is that
if the dollar amount we are to optimize for is 20$ and below, we can go ahead and use this current recursive approach but if its greater, we are going to split the transactions
into pairs of 20 and run these recursive operations in a loop and at the end, sum of the amounts of the transaction pairs

if amount is less than 20, we can go straight to recursive, if its above, we are going to 

Solution
50ms - 3698.28
60ms - 4523.98
90ms - 6294.5599999999995
1000ms - 20337.89