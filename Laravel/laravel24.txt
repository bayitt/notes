By default, Laravel provides the TrimStrings and ConvertEmptyStringsToNull middleware in your application's global middleware stack. These middleware will
automatically trim all incoming string fields on the request as well as convert any empty string fields to null.

We may retrieve uploaded files from an IlluminateHttpRequest instance using the file() method or using dynamic properties. We can check if a file is present making
use of the hasFile() method. We can check if there was no problem uploading the file making use of the isValid() method.

All routes and controllers should return a response to be sent back to the user's browser. Laravel provides several different ways to return responses. The most
basic response is to return a string from a closure or a controller action. The framework will automatically convert the string into a full HTTP response.

Apart from strings, we may also return arrays from our controller actions and Laravel will automatically convert it into a JSON response.
Usually, we will not be returning strings or arrays from our actions, most likely we will be returning full on instances of Illuminate\Http\Response class.

Returning a full Response alows you to customize the response's HTTP status code and headers. You may also return Eloquent ORM models and collections
directly from your routes and controllers. When you do, Laravel will automatically convert the models and collections to JSON responses while respecting the model's
hidden attributes.

We can chain headers to our responses by means of the header() method, alternatively, we can specify a withHeaders() method to attach an array of headers
to be sent along with the response. 

We may also attach cookies to an outgoing response object by making use of the $response->cookie() method. If we would like to ensure that a cookie is sent with
the outgoing response but we do not have an instance of the response yet, we can queue the cookie making use of the Cookie facade. The queue method accepts the 
arguments which are needed to create the cookie and adds it to the response, when the response is being sent to the browser

Instead of making use of the $response->cookie() method, we can make use of the global cookie helper to generate the cookie and pass it to the $request->cookie() method
We can also remove cookies by chaining the withoutCookie() method to a response. Alternatively we can make use of the Cookie::facade to do this and have it
automatically attached to to a response by passing the Cookie::forget() method to it.

By default, all cookies generated by Laravel are encrypted and signed so that they cannot be modified or read by the client. If you would like to disable
encryttion for a set of cookies generated by the application, we can make use of the $except property of the App\Http\Middleware\EncryptCookies middleware

Redirect responses are instances of the Illuminate\Http\RedirectResponse class and contains the proper headers needed to redirect the user to another URL.
The simplest method to generate a redirect is to use the global redirect helper. If we want to take the user back to the previous url, we can make use of the
global back() helper