When you start a new Laravel project, error and exception handling is already handled for you. The App\Exceptions\Handler class is where all exceptions thrown
by your application are handled.

The debug option in your config/app.php configuration file determines how much information about an error is actually displayed to the user. This class
contains a register method where we may register custom exception reporting and rendering callbacks. Exception reporting is used to log exceptions or send them
to an external service like Flare, Bugsnag or Sentry. For example, if we need to report different types of exceptions in different ways, we can make use of the
reportable method to register a closure that should be executed when an exception of a given type needs to be reported. Laravel will automatically deduce
the type of exception the closure reports by examining the type hint of the exception

When you register a custom exception reporting callback using the reportable method, Laravel will still log the exception using the default logging configuration
for the application. If you wish to stop the propagation of the exception to the default logging stack, we may chain the stop() method or return false from
the closure.

Laravel automatically adds the current user's id to every exception's log message as contextual data. We can define our orwn contextual data by overriding the
context() method of the parent class. The context is an array.

Sometimes, we need to report an exception but continue handling the request. For this, we can make use of the report() global helper method.
When buiding your application, there are some types of exceptions that you do not want to bother to report. Your application's exception handler contains a
$dontReport property which is initialized to an empty array.

By default, the Laravel exception handler will convert exceptions into an HTTP response for you. However, you are free to register a custom rendering closure
for exceptions of a given type. You may accomplish this via the renderable method of your exception handler. The closure passed to the renderable method should
return an object of Illuminate\Http\Response which may be generated by the global response helper.

Instead of type checking exceptions in the exception handler's register() method, we may define report and render methods directly on our custom exceptions.
When these methods exist, they will be automatically called by the framework.

In order to generate responses with different error codes from our application, we can make use of the global abort() helper.
You may publish Laravel's default error messages, with the php artisan vendor:publish command.