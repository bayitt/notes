Blade is the simple, yet powerful templating engine that is included with Laravel. Blade allows you to run php code.
Blade files are stored with the .blade.php file extension and are stored in the resources/views directory. We can put any PHP code inside a blade echo statement.

We can make use of the @json() directive to encode arrays passed in as json. By default {{ }} Blade statements are automatically sent through PHP's
htmlspecialchars function to prevent XSS attacks. If we do not want data to be escaped, we can make use of {!! $variable !!}. The @symbol may be used to escape
blade directives and echo statements. For example, instead of Blade rendering the value of the $name variable with @{{ $name }}. Instead, it will render
@{{ $name }} like that. Incase, we have many blocks that we need to escape, we can make use of the @verbatim directive instead of having to manually escaping
every directive

We can construct if statements in Blade making use of the @if, @elseif, @else and @endif directives. The difference is that there is no {}.
Blade also provides an @unless directive. We can also make use of the @isset() and @empty(). We can also make use of the @aauth and @guest directives
to conditionally show content depending on whether the user is logged in or not. We can even specify the guards that we want to be used to check authentication

We can check if the application is running in the production environment using the @production directive. Or we can determine if the application is running in
a particular environment making use of the @env() directive

Switch statements can be constructed making use of the @switch(), @case(), @break(). Blade also provides @for, @foreach, @while(). There is also an
@forelse directive. We can even make use of the @continue and @break directives to break respectively.

When looping, a loop variable is going to be available inside of our loop, we can make use of the first and last methods on the loop variable.
Inside of nested loops, we can access the parent loop by means of the $loop->parent variable. The loop variable also contains a variety of other useful properties.
$loop->index (starts at 0)
$loop->iteration (starts at 1)
$loop->remaining
$loop->count
$loop->even
$loop->odd

Comments can also be defined inside of Blade templates, with {{--  --}}
Blade's @include directive allows me to include a Blade view from within another view. Just like with the global view helper and the View facade, we can send in
an an array to the View. We can make use of the @includeIf directive to include a view that may or may not be present. If we want to include a view depending on
a boolean, we can make use of the @includeWhen and @includeUnless directives. We can even evaluate our expressions making use of the ?? directive.

The @section directive, defines a section of content, while the @yield directive is used to display the contents of a given section.
When defining a child view, use the @extends Blade directive to specify which layout the child view should inherit
