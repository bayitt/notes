For more complex validation scenarios, we can create form requests. Form requests are custom classes that encapsulate their own validation and authorization logic.
To create a form request class, we may make use of the make:request Artisan CLI command. The generated form request class will be placed in the app/Http/Requests
directory. If the diectory does not exist, it will be created when you run the make:request command. Each form request generated by Laravel has two methods:
authorize and rules. The authorize method determines if the currently authenticated user can perform the action while the rules method returns the vaidation
rules that should apply to the user's data. All we have to do to make use of it is to type hint the request as a dependency and the incoming request is 
validated before it enters our controller. Means that we do not have to clutter our controller with validation logic.

We can retrieve the validated input data with $request->validated(). The route() method on a request object grants us access to URI parameters in the route
We may customize the error messages used by the form request by overriding the messages() method. The messages() method should return an array of attribute/rule pairs
and their corresponding error  messages

If we do not intend to make use of the validate() method on the $request instance, we can create a validator instance manually using the Validator facade. The make
method on the facade generates a new validator instance. We can make use of the validator instance fails() method to check if validation failed.

We can make use of the withErrors() method to flash error messages to the session. If we would ike to create a validator instance manually but stil take advantgage
of the automatic redirection offered by the Http requests validate method, we can just as easily call the validate method on an existing validator instance.

We may make use of the validateWithBag() method to store the error messages in a named error bag. We may pass an optional third messages parameter to a validator 
instance

To retrieve the first error message for a given field , we can make use of the first() method. To retrieve an array of all messages for a given field, we can
make use of the $errors->get() method

To get an array of all messages, we can make use of the $errors->all() method. The has() method may be used to check if any error messages exist for a given field
We can also specify custom error messages in the custom array of the validation.php file. Also, we can easily specify what attributes we want to be replaced in 
the attriutes array