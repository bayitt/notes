To give your application a speed boost, you should cache all of your configuration files into a single file using the config:cache artisan command. However, 
run the php artisan config:cache command only as part of your deployment process. This command should not be run during local development as configuration options
wil frequently need to be changed.

When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to disable your application 
while it is updating or when you are performing maintenance. If the application is in maintenance mode, a MaintenanceModeException will be thrown with a status code
of 503. To enable maintenance mode, run the php artisan down command. Even while in maintenance mode, you may use the secret option to specify a maintenance mode
bypass token, --secret="". After placing the application in maintenance mode, we may navigate to the application URL matching the token and Laravel will issue 
a maintenance mode bypass cookie to the browser and with that we can access the application normally as if not in maintenance mode.

If we utilize the php artisan down command during deployment, users may still encounter errors if they access the application while composer dependencies or other
infrastructure components are updating. To avoid this, Laravel allows you to pre-render a maintenance mode view that will be returned at the very beginning of the
request cycle. php artisan down --render="errors:503"

To diasble maintenance mode, use the php artisan up command.

We may customize the default maintenance mode template by defining your own template as resources/views/templates/503.blade.php

Laravel directories - 
- app - The app directory contains the core code in your application. Almost all the classes I wil define are going to be inside this directory
- bootstrap - This directory contains the app.php file which bootstraps the framework. It also houses a cache directory which contains fraemwork generated files
for performance optimization such as the route and services caches files. Typically do not need to modify any files here
- config - The config directory contains all of your application's configuration files 
- database - This contains all database migrations, model factories and seeds
- public - This contains the index.php file which is the entry point for all requests entering your application and configures autoloading. It also houses assets
such as images, Javascript and css.
- resources - contains all views
- routes - This contains all the route definitions in your app
- storage - The storage directory contains your logs, compiled Blade template, file based sessions, file caches and other files generated by the framework.
This directory is segragated into app, framework and logs directories. The app directory may be used to store any files generated by your application.
The framework directory is used to store framework generated files and caches. Finally, the logs directory contains your application's log files.
- Tests - this contains all your automated tests
- vendor - this contains your Composer dependencies
