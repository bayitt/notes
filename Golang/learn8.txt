Maps are used to store data values in key:value pairs. Each element in a map is a key:value pair. A map is an unordered and changeable collection that does not allow duplicates.
The length of a map is the number of its elements. You can find it using the len() function. The default value of a map is nil. Maps hold references to an underlying hash table.
Maps are apparently Golang's equivalent of objects in Javascript/Typescript and dictionaries in Python. Go has multiple ways for creating maps.

Create maps using var and :=
var a = map[KeyType]ValueType{key1:value1, key2:value2,...}
b := map[KeyType]ValueType{key1:value1, key2:value2,...}

The order of the map elements defined in the code is different from the way that they are stored. The data are stored in a way to have efficient data retrieval from the map.

We can also create maps using the make() function

make(map[KeyType]ValueType)

There are two ways to create an empty map. One is by using the make() function and the other is by using the following syntax
var a map[KeyType]ValueType

Note, however that the make() function is the right way to create an empty map. If you make an empty map in a different way and write to it, it will cause a runtime panic.

nil is the Golang equivalent of null.

The map key can be of any data type for which the equality operator (==) is defined. These include
- Boolean
- Numbers
- Strings
- Arrays
- Pointers
- Structs
- Interfaces (as long as the dynamic type supports equality)

Invalid key types are
- Slices
- Maps
- Functions

These types are invalid because the equality operator (==) is not defined for them

Map values can be any type.