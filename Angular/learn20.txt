The basic buiilding blocks of an Angular application are NgModules , which provide a compilation context for components

Leke remember that the @Component decorator is what makes a class a Component. Also, a Component decorator must be immediately followed by the class that
it is decorating

An Angular Application always has a root module that enables bootstrapping

From what I can see, NgModules consist of sets of components and they define compilation contexts for these components

Decorators are functions that modify Javascript classes

Types of Data Bindings
Event binding lets your application respond to user input in the target environment by updating your application data
Property binding lets you interpolate values that are compited from your application data into the HTML

With property binding, essentially you are binding properties from your component's class into the HTML

In a way, I think it is much similar to the way before the view is displayed, Blade resolves all your logic and computes it into HTML

Angular also supports two way data binding

Pipes are used to improve user experience by transforming values for display

Much in the same way that Component classes are decorated by the @Component decorator, Service classes are decorated by the @Injectable() decorator.

It is this decorator that makes it possible for the particular Service class to be injected as a dependency in a component 

The Angular router maps URL like paths to views from components instead of pages

An Angular view is made up of a Component and a Template, a Template to render the data and a Component to provide this data

Angular's modularity system is called NgModules

NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities

They can contain components, service files and other files defined by their scope

They can import functionality exported by other NgModules and export functionality for import by other NgModules