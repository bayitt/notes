FastAPI gives you the following:

Based on open standards -
- OpenAPI
- Automatic data model documentation with JSON Schema

Its all based on standard Python 3.6 type declarations (thanks to Pydantic). FastAPI includes an extremely easy to use, but powerful Dependency Injection system. Even dependencies can have
dependencies, creating a hierarchy or "graph" of dependencies. All this is automatically handled by the framework. Reeally its the same idea with the service container in Laravel and the
Nest IOC container in Nest JS.

Python has support for optional type hints (also called type annotations). These type hints or annotations are a special syntax that allows declaring the type of a variable. Its basically
typescript for python. By declaring types for your variables, editors and tools can give you better support.

Simple Python types
- int
- float
- bool
- bytes

There are some data structures that can contain other values, like dict, list, set and tuple. And the internal values can have their own type too. These types that have internal types
are called "generic" types. And its possible to declare them, even with their internal types. To declare those types and the internal types, you can use the standard Python module
typing. It exists specifically to support these type hints.

Pydantic is a Python library to perform data validation. You declare the shape of the data as classes with attributes. And each attribute has a type. Then you create an instance of that
class with some values and it will validate the values, convert them to the appropriate type (if that's the case) and give you an object with all the data. 

From what I can see, FastAPI shares a lot of similarities with Flask in enabling users to quickly and easily spin up APIs without a lot of boilerplate code like with Django. It
also looks to share similarities with Nest JS in terms of decorator based syntax. Then, in development, FastAPI ships with a built in server called uvicorn. Then, just like with flask,
your entire application is a basic FastAPI instance. The command to run the uvicorn server is unvicorn filename:app. add the --reload option to get the server to hot reload upon changes.

Also, by default, the /docs route exposes a Swagger UI documentation. While the /redoc route exposes redoc documentation

FastAPI automatically generates a JSON schema with the descriptions of your api. This JSON schema is avaliable at openapi.json.

Path operation decorators. Path operation functions.

We can declare path parameters or variables with the same syntax used by Python format strings. These path parameters or variables are passed to the path operation functions

Because path operations are evaluated in order, we need to make sure that fixed paths are declared before dynamic paths.