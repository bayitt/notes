Tailwind Recap

The whole idea with Tailwind is that Tailwind makes use of utilities. The way Tailwind makes use of responsive classes is by the : operator. Unlike with Bootstrap
which makes use of -. The breakpoints are the same
sm - 640px
md - 768px
lg - 1024px
xl - 1280px

Tailwind also has support for pseudo variants, hover, focus, disabled, active. It works in the same way that responsive variants work, with the : operator. 
To make use of responsive and pseudo variants, simply chain it, like md:hover:text-dark.

In order to generate our tailwind.config.js file (optional). We need to make use of the @tailwind function to inject the tailwind base, components and utilities
in a .css file. Then we generate our css file by running npx tailwindcss style.css -o index.css.

Tailwind CSS has a couple of base styles encapsulated in a package called Preflight. Preflight is injected by the tailwind cli at @tailwind base.
If we intend to add our own base styles, we add it after @tailwind base. 

If we want to abstract and refactor our common code and create our own components, we can do so after @tailwind components. We can also make use of the 
@apply function to apply tailwind utilities.

We can also create our own utilities after the @tailwind utilities, if we want to generate our own responsive versions of our own utilities, we can do so by 
making use of the @responsive function, if we also want to geenerate our pseudo variants we make use of @variants. 

The .responsive class, specifies that at the various breakpoints, its width should correspond to the min-width of that breakpoint. 

With Tailwind, the whole idea is that all the various css properties are available via classes called utilities.

With box-sizing, we have .box-border and .box-content
With positioning, we have .fixed, .relative, .absolute, .static
With displays, we have .hidden, .flex, .block, .inline, .grid, .inline-block
With overflow, we have .overflow-scroll, .overflow-visible, .overflow-auto, .overflow-hidden and variants for the x and y axes.
With object-fit, we have .object-cover, .object-contain, .object-none
With spacing, we have .inset-0, .inset-y, .inset-x, .top, .right, .bottom, .left