Middleware is a function which is called before the route handler. Middleware functions have access to the request and response objects, and the next() middleware function
in the application's request response cycle. The next() middleware function is commonly denoted with a next variable.

You implement custom Next middleware in a function or in a class that implements the NextMiddleware interface. Nest middleware fully supports dependency injection. Just as with
providers and controllers, they are able to inject dependencies that are available within the same module

There is no place for middleware in the @Module() decorator. Instead, we can set them up making use of the configure() method of the module class. Modules that implement 
middleware have to implement the NestModule interface.

consumer.apply(LoggerMiddleware).forRoutes()

We can also restrict the middleware to a particular HTTP method by passing in an object to the forRoutes({}) method with.
The methods can be chained in a fluent style. We can apply multiple middleware by passing in an array of middleware. or with the forRoutes method we can pass in controllers or an array
of controllers

We can want to exclude certain routes and we can do so with the exclude() method

Functional Middleware

Consider using the easier functional middleware anytime you have middleware that does not need dependencies.

In order to apply multiple middleware, simply supply a comma, separated list

If we want to bind global middleware to every single request in the app, we can make use of the use() method which is specified in the INestApplication interface

Nest comes with a built in exceptions layer which is responsible for processing all unhandled exceptions across an application. When an exception is not handled by your application code,
it is caught by this layer, which then sends an appropriate user friendly response.

Out of the box, this action is performed by a global exception filter, which handles exceptions of type HttpException and subclasses of it. When an exception is unrecognized (is neither)
HttpException not a class that inherits from HttpException, the built in exception filter generates the default JSON response.

Nest provides a built in HttpException class. The HttpException constructor takes two required arguments which determine the response. The response argument which can be a string or 
an object and a status code.

By default the JSON response from the HTTPException is an object with the statusCode and message property which is based on the statusCode

The whole idea is that the message part of the response is based on the statusCode, so to override it, we can pass in a string to the response of the constructor. To override the
entire response, pass in an object and Nest JS is going to serialize it

In many cases, we will not need to write custom exceptions, and can make use of the built in Nest HTTP Exception. If we do need to create customized exceptions, its good practive
to create your own exceptions hierachy